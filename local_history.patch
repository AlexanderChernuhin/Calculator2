Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1707940055761)
+++ b/.idea/misc.xml	(date 1707940055761)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="openjdk-20" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1707940059509)
+++ b/.idea/.gitignore	(date 1707940059509)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1707940055682)
+++ b/.idea/modules.xml	(date 1707940055682)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Calculator2.iml" filepath="$PROJECT_DIR$/Calculator2.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: Calculator2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Calculator2.iml b/Calculator2.iml
new file mode 100644
--- /dev/null	(date 1707940055604)
+++ b/Calculator2.iml	(date 1707940055604)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	
+++ b/src/Main.java	(date 1707940622248)
@@ -1,17 +1,24 @@
-// Press Shift twice to open the Search Everywhere dialog and type `show whitespaces`,
-// then press Enter. You can now see whitespace characters in your code.
+import java.util.Scanner;
+
 public class Main {
     public static void main(String[] args) {
-        // Press Alt+Enter with your caret at the highlighted text to see how
-        // IntelliJ IDEA suggests fixing it.
-        System.out.printf("Hello and welcome!");
+        Scanner scanner = new Scanner(System.in);
+        Calculator calculator = new Calculator();
 
-        // Press Shift+F10 or click the green arrow button in the gutter to run the code.
-        for (int i = 1; i <= 5; i++) {
-
-            // Press Shift+F9 to start debugging your code. We have set one breakpoint
-            // for you, but you can always add more by pressing Ctrl+F8.
-            System.out.println("i = " + i);
+        System.out.println("Введите выражение (например, \"a\" + \"b\") или 'exit' для выхода:");
+        while (true) {
+            String input = scanner.nextLine().trim();
+            if (input.equalsIgnoreCase("exit")) {
+                System.out.println("До свидания!");
+                break;
+            }
+            try {
+                String result = calculator.calculate(input);
+                System.out.println("Результат: " + result);
+            } catch (IllegalArgumentException | ArithmeticException e) {
+                System.out.println("Ошибка: " + e.getMessage());
+            }
         }
+        scanner.close();
     }
-}
\ No newline at end of file
+}
Index: src/Calculator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Calculator.java b/src/Calculator.java
new file mode 100644
--- /dev/null	(date 1707940489699)
+++ b/src/Calculator.java	(date 1707940489699)
@@ -0,0 +1,34 @@
+public class Calculator {
+    public String calculate(String input) throws IllegalArgumentException, ArithmeticException {
+        InputParser parser = new InputParser();
+        String[] operands = parser.parseOperands(input);
+        String operator = parser.parseOperator(input);
+
+        switch (operator) {
+            case "+":
+                return operands[0] + operands[1];
+            case "-":
+                if (operands[0].contains(operands[1])) {
+                    return operands[0].replace(operands[1], "");
+                } else {
+                    return operands[0];
+                }
+            case "*":
+                int num = Integer.parseInt(operands[1]);
+                StringBuilder sb = new StringBuilder();
+                for (int i = 0; i < num; i++) {
+                    sb.append(operands[0]);
+                }
+                return sb.toString();
+            case "/":
+                int divisor = Integer.parseInt(operands[1]);
+                if (divisor == 0) {
+                    throw new ArithmeticException("Деление на ноль!");
+                }
+                int quotient = operands[0].length() / divisor;
+                return operands[0].substring(0, quotient);
+            default:
+                throw new IllegalArgumentException("Неподдерживаемая операция. Поддерживаемые операции: +, -, *, /");
+        }
+    }
+}
Index: src/InputParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/InputParser.java b/src/InputParser.java
new file mode 100644
--- /dev/null	(date 1707941364377)
+++ b/src/InputParser.java	(date 1707941364377)
@@ -0,0 +1,20 @@
+public class InputParser {
+    public String[] parseOperands(String input) throws IllegalArgumentException {
+            if (!input.matches("\"[^\"]*\"\\s*[+\\-*/]\\s*\"[^\"]*\"")) {
+            throw new IllegalArgumentException("Некорректный формат ввода!");
+        }
+        String[] parts = input.split("\\s*[+\\-*/]\\s*");
+        if (parts.length != 2) {
+            throw new IllegalArgumentException("Некорректное количество операндов!");
+        }
+        return parts;
+    }
+
+    public String parseOperator(String input) throws IllegalArgumentException {
+        String operator = input.replaceAll(".*?([+\\-*/]).*", "$1");
+        if (!operator.matches("[+\\-*/]")) {
+            throw new IllegalArgumentException("Некорректная операция!");
+        }
+        return operator;
+    }
+}
Index: src/OutputFormatter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/OutputFormatter.java b/src/OutputFormatter.java
new file mode 100644
--- /dev/null	(date 1707941021524)
+++ b/src/OutputFormatter.java	(date 1707941021524)
@@ -0,0 +1,10 @@
+public class OutputFormatter {
+    public static String formatResult(String result) {
+        final int MAX_OUTPUT_LENGTH = 40;
+        if (result.length() > MAX_OUTPUT_LENGTH) {
+            return result.substring(0, MAX_OUTPUT_LENGTH) + "...";
+        } else {
+            return result;
+        }
+    }
+}
Index: src/CustomExceptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/CustomExceptions.java b/src/CustomExceptions.java
new file mode 100644
--- /dev/null	(date 1707940975705)
+++ b/src/CustomExceptions.java	(date 1707940975705)
@@ -0,0 +1,19 @@
+public class CustomExceptions {
+    public static class InvalidInputException extends Exception {
+        public InvalidInputException(String message) {
+            super(message);
+        }
+    }
+
+    public static class UnsupportedOperationException extends Exception {
+        public UnsupportedOperationException(String message) {
+            super(message);
+        }
+    }
+
+    public static class CalculationException extends Exception {
+        public CalculationException(String message) {
+            super(message);
+        }
+    }
+}
